# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        vals = []
        
        def pre(node):
            if node!=None:
                vals.append(str(node.val))
                pre(node.left)
                pre(node.right)
        pre(root)
        return " ".join(vals)

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        vals = collections.deque(int(val) for val in data.split())
        
        def pre(minval, maxval):
            if vals and minval < vals[0] < maxval:
                ele = vals.popleft()
                node = TreeNode(ele)
                node.left = pre(minval, ele)
                node.right = pre(ele, maxval)
                return node
                
        return pre(-float('inf'), float('inf'))

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))