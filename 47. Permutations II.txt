class Solution:
    def back(self, ans, temp, count, nums, n):
        if len(temp) == n:
            ans.append(list(temp))
            return 
        for c in count:
            if count[c]>0:
                count[c] -= 1
                temp.append(c)
                self.back(ans, temp, count, nums, n)
                temp.pop()
                count[c] += 1
    
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        ans, temp = [], []
        nums.sort()
        count = collections.Counter(nums)
        self.back(ans, temp, count, nums, len(nums))
        return ans