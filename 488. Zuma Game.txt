class Solution:
    def process(self, board):
        i = 0
        for j in range(len(board)):
            if board[i] == board[j]:
                continue
            if j-1-i+1 >= 3:
                return self.process(board[0:i] + board[j:])
            else:
                i = j
        return board
    
    def helper(self, board, handcount):
        board = self.process(board)
        if board == '#':
            return 0
        rs = 6
        i = 0
        for j in range(len(board)):
            if board[i] == board[j]:
                continue
            need = 3 - (j-1-i+1)
            if handcount[board[i]] >= need:
                handcount[board[i]] -= need
                rs = min(rs, need + self.helper(board[0:i] + board[j:], handcount))
                handcount[board[i]] += need
            i = j
        return rs
    
    def findMinStep(self, board: str, hand: str) -> int:
        handcount = collections.Counter(hand)
        board += '#'
        rs = self.helper(board, handcount)
        if rs == 6:
            return -1
        return rs
    
    