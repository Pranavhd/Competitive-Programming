#https://leetcode.com/problems/longest-increasing-subsequence/

class Solution:
    def bin(self,A,l,r,key):
        while r>l:
            mid = l + (r-l)//2
            if A[mid]>=key:
                r = mid
            else:
                l = mid+1
        return r
    
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if nums==[]:
            return 0
        
        dp = [0 for i in range(len(nums)+1)]
        len_ = 1
        dp[0] = nums[0]
        
        
        for i in range(1,len(nums)):
            if nums[i]>dp[len_-1]:
                dp[len_] = nums[i]
                len_ += 1
            else:
                dp[self.bin(dp,0,len_-1,nums[i])] = nums[i]
            
        return len_