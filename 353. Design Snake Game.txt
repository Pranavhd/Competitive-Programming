class SnakeGame:

    def __init__(self, width: int, height: int, food: List[List[int]]):
        """
        Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
        """
        self.cols, self.rows = width -1, height -1
        self.direcs = {'R':[0,1], 'L':[0,-1], 'D':[1,0], 'U':[-1,0]}
        self.size = 0
        self.food = food
        self.queue = collections.deque()
        self.queue.append([0,0])
        self.set_ = set()
        self.set_.add((0,0))

    def move(self, direction: str) -> int:
        """
        Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body.
        """
        newx = self.queue[-1][0] + self.direcs[direction][0]
        newy = self.queue[-1][1] + self.direcs[direction][1]
        if newx < 0 or newx > self.rows or newy < 0 or newy > self.cols:
            return -1
        if (newx,newy) in self.set_ and tuple(self.queue[0])!=(newx,newy):
            return -1
        if self.food and newx == self.food[0][0] and newy == self.food[0][1]:
            self.size += 1
            self.queue.append([newx,newy])
            self.set_.add((newx,newy))
            self.food.pop(0)
            return self.size
        self.queue.append([newx,newy])
        ele = self.queue.popleft()
        self.set_.remove(tuple(ele))
        self.set_.add((newx,newy))
        return self.size

# Your SnakeGame object will be instantiated and called as such:
# obj = SnakeGame(width, height, food)
# param_1 = obj.move(direction)