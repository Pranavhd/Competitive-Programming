class Solution:
    def __init__(self):
        self.neigh = {
                1: (6, 8),
                2: (7, 9),
                3: (4, 8),
                4: (3, 9, 0),
                5: tuple(),  # 5 has no neighbors
                6: (1, 7, 0),
                7: (2, 6),
                8: (1, 3),
                9: (2, 4),
                0: (4, 6),    
                }
        self.cache = {}
        self.mod = 10**9 + 7
        
    def count(self, start, N):
        if (start, N) in self.cache:
            return self.cache[(start, N)]
        
        if N == 1:
            self.cache[(start, N)] = 1
            return 1
        
        ans = 0
        for neigh in self.neigh[start]:
            ans += self.count(neigh, N-1)
        self.cache[(start, N)] = ans % self.mod
        return self.cache[(start, N)]
    
    def knightDialer(self, N: int) -> int:
        
        prev_dp = [1] * 10
        
        while N>1:
            curr_dp = [0] * 10
            for i in (0,1,2,3,4,5,6,7,8,9):
                for neigh in self.neigh[i]:
                    curr_dp[i] += prev_dp[neigh]
            prev_dp = curr_dp
            N -= 1
            
        return sum(prev_dp)%self.mod
        
        '''
        ans = 0
        for i in (0,1,2,3,4,5,6,7,8,9):
            ans += self.count(i, N)
        return ans % self.mod
        '''