class Solution:
    def dfs(self, matrix, i, j, cache):
        if cache[i][j]:
            return cache[i][j]
        for direc in self.direcs:
            x, y = i + direc[0], j + direc[1]
            if 0<=x<len(matrix) and 0<=y<len(matrix[0]) and matrix[x][y] > matrix[i][j]:
                cache[i][j] = max(cache[i][j], self.dfs(matrix, x, y, cache))
        cache[i][j] += 1
        return cache[i][j]
            
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0
        
        rows = len(matrix)
        cols = len(matrix[0])
        cache = [[0 for j in range(cols)] for i in range(rows)]
        
        self.direcs = [[-1, 0],[1, 0],[0, -1],[0, 1]]
        ans = 0
        for i in range(rows):
            for j in range(cols):
                ans = max(ans, self.dfs(matrix, i, j, cache))
        return ans