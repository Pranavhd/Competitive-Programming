class Solution:
    def intToRoman(self, num, x = 0):
        
        ones = { 0:'', 1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX' }
        tens      = { 0:'', 1:'X', 2:'XX', 3:'XXX', 4:'XL', 5:'L', 6:'LX', 7:'LXX', 8:'LXXX', 9:'XC' }
        hundreds  = { 0:'', 1:'C', 2:'CC', 3:'CCC', 4:'CD', 5:'D', 6:'DC', 7:'DCC', 8:'DCCC', 9:'CM' }
        thousands = { 0:'', 1:'M', 2:'MM', 3:'MMM' }
        
        if num >= 1000:
            num = str(num)
            roman = [thousands, hundreds, tens, ones]
        elif num >= 100:
            num = str(num)
            roman = [hundreds, tens, ones]
        elif num >= 10:
            num = str(num)
            roman = [tens, ones]
        else:
            num = str(num)
            roman = [ones]
        
        ans = ""
        for i in range(len(num)):
            ans = ans + roman[i][int(num[i])]

        return ans

        
'''
keep doing while num > 0:

get last position integer : 4

check if that is present in our rules:
update ans = new_val + ans
num = num - digit*pow(10,x)... where x = 0,1.....
else linear search on values
'''