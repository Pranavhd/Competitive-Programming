# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def distanceK(self, root, target, K):
        """
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """
        d = collections.defaultdict(list)
        
        def dfs(child, parent):
            if parent and child:
                d[parent].append(child)
                d[child].append(parent)
            if child: 
                dfs(child.left, child)
                dfs(child.right, child)
                
        dfs(root, None)
        
        queue = collections.deque([(target, 0)])
        seen = {target}
        
        while queue:
            if queue[0][1] == K:
                return [node.val for node, dist in queue]
            node, dist = queue.popleft()
            for nei in d[node]:
                if nei not in seen:
                    queue.append((nei,dist + 1))
                    seen.add(nei)
                    
        return []