# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[Interval]
        :type B: List[Interval]
        :rtype: List[Interval]
        """
        
        i, j , ans = 0, 0, []
        
        while i < len(A) and j < len(B):
            lo = max(A[i].start,B[j].start)
            hi = min(A[i].end,B[j].end)
            
            if lo <= hi:
                ans.append(Interval(lo,hi))
            
            if A[i].end > B[j].end:
                j += 1
            else:
                i += 1
        
        '''
        while i < len(A):
            ans.append(A[i])
            i += 1
        while j< len(B):
            ans.append(B[j])
            j += 1
        '''
        return ans