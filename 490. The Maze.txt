class Solution(object):
    def hasPath(self, maze, start, destination):
        """
        :type maze: List[List[int]]
        :type start: List[int]
        :type destination: List[int]
        :rtype: bool
        """
        x,y = start
        visited = [[0 for j in range(len(maze[0]))] for i in range(len(maze))]
        direcs = [[0,1],[-1,0],[1,0],[0,-1]]

        def dfs(currx, curry):
            if visited[currx][curry] == 1:
                return False

            visited[currx][curry] = 1
            if currx == destination[0] and curry == destination[1]:
                return True

            result = 0
            for direc in direcs:
                x, y = direc
                newx, newy = currx, curry
                while 0<=newx + x<len(maze) and 0<=newy + y<len(maze[0]) and maze[newx + x][newy + y]!=1:
                    newx += x
                    newy += y

                result = result | dfs(newx, newy)

            return result

        return dfs(x,y)
