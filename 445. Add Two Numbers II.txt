# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        n1 = 0
        while l1:
            n1 = n1*10 + l1.val
            l1 = l1.next
        
        n2 = 0
        while l2:
            n2 = n2*10 + l2.val
            l2 = l2.next
            
        n1 += n2
        n1 = str(n1)
        l3 = ListNode(-1)
        curr = l3
        
        #print(n1)
        while n1:
            curr.next = ListNode(int(n1[0]))
            curr = curr.next
            n1 = n1[1:]
        
        return l3.next


---------------------------------------------

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getLength(self, node):
        i = 0
        while node:
            i += 1
            node = node.next
        return i
    
    def addzero(self, len_, node):
        for i in range(len_):
            new = ListNode(0)
            new.next = node
            node = new
        return node
    
    def getcombine(self, l1, l2):
        if not l1:
            return (0, None)
        a, ret = self.getcombine(l1.next, l2.next)
        sum_ = l1.val + l2.val + a
        new_ = ListNode(sum_%10)
        new_.next = ret
        return ((sum_/10), new_)
    
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        len1, len2 = self.getLength(l1), self.getLength(l2)
        l1 = self.addzero(len2-len1, l1)
        l2 = self.addzero(len1-len2, l2)
        c, ans = self.getcombine(l1, l2)
        if c>0:
            new_ = ListNode(c)
            new_.next = ans
            ans = new_
        return ans
