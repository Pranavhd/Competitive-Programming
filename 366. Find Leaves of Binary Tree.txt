# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findLeaves(self, root: TreeNode) -> List[List[int]]:
        
        ans = []
        
        def dfs(node):
            if not node:
                return -1
            
            h = 1 + max(dfs(node.left), dfs(node.right))
            if len(ans) <= h:
                ans.append([])
            ans[h].append(node.val)
            return h
        
        dfs(root)
        return ans




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        dfs(ans, root);
        return ans;
    }
    
    public Integer dfs(List<List<Integer>> ans, TreeNode node){
        if(node == null)
            return -1;
        int h = 1 + Math.max(dfs(ans, node.left),dfs(ans, node.right));
        if(ans.size()<=h)
            ans.add(new ArrayList<>());
        ans.get(h).add(node.val);
        return h;
    }
}