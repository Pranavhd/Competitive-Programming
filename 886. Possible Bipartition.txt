class Solution:
    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:
        '''
        Create a graph. Graph[][] = 1 denotes an edge
        Create colors array with length of N
        
        for each node:
            if colors[] == 0:
                dfs(node, colors, graph, color)
                
        dfs(node, colors, graph, color):
            colors[node] = color
            for neigh in graph[node]:
                if colors[neigh] == color:
                    return False
                if colors[neigh] == 0 and !dfs(neigh, colors, graph, color*-1):
                    return False
            return True
        '''
        
        graph = collections.defaultdict(list)
        for x, y in dislikes:
            graph[x].append(y)
            graph[y].append(x)
            
        colors = [0]*(N+1)
        
        for i in range(1,N+1):
            if colors[i] == 0 and not (self.dfs(i, colors, graph, 1)):
                return False
        return True
    
    def dfs(self, node, colors, graph, color):
        colors[node] = color
        for neigh in graph[node]:
            if colors[neigh] == color:
                return False
            if colors[neigh] == 0 and not (self.dfs(neigh, colors, graph, color*-1)):
                return False
        return True