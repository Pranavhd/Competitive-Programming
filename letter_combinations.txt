#https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/

class Solution:
    def __init__(self):
        self.dict_mappers = {}
        self.digits = ""
        self.final_ans = []

    def recur(self,ans,index):
        if len(ans) == len(self.digits):
            self.final_ans.append(ans)
            return

        for each_ele in self.dict_mappers[int(self.digits[index])]:
            self.recur(ans+each_ele,index+1)

    def letterCombinations(self,digits):

        if digits=="":
            return []
        
        alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']

        self.digits = digits
        count = 0
        for i in range(2,7):
            self.dict_mappers[i] = alpha[count:count+3]
            count = count+3

        self.dict_mappers[7] = ['p','q','r','s']
        self.dict_mappers[8] = ['t','u','v']
        self.dict_mappers[9] = ['w','x','y','z']

        ans = ""
        self.recur(ans,0)

        return (self.final_ans)