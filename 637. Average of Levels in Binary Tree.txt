# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def averageOfLevels(self, root: TreeNode) -> List[float]:
        if not root:
            return [0]
        
        queue = collections.deque()
        queue.append(root)
        
        j = 0
        ans = []
        while queue:
            curr_val = 0
            len_ = len(queue)
            for i in range(len_):
                ele = queue.popleft()
                #print(j, ele.val)
                if ele.left:
                    queue.append(ele.left)
                if ele.right:
                    queue.append(ele.right)
                curr_val += ele.val
                #print(curr_val, len_)
            j += 1
            ans.append(curr_val/len_)
        return ans


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List <Double> res = new ArrayList<>();
        Queue <TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while (!queue.isEmpty()){
            long sum = 0, count = 0;
            Queue < TreeNode > temp = new LinkedList<>();
            while (!queue.isEmpty()){
                TreeNode n = queue.remove();
                sum += n.val;
                count += 1;
                if (n.left != null)
                    temp.add(n.left);
                if (n.right != null)
                    temp.add(n.right);
            }
            
            queue = temp;
            res.add(sum*1.0/count);
        }
        
        return res;
    }
}